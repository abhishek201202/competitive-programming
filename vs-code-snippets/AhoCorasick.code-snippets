{
	"": {
		"prefix": "AhoCorasick",
		"body": [
		  "// Tested on [https://www.codechef.com/MAY20A/problems/TWOSTRS]",
		  "template<int ALPHABET_SIZE> struct AhoCorasick{",
		  "    vector<array<int, ALPHABET_SIZE>> T;",
		  "    vector<int> Leaf, suffixLink;",
		  "    AhoCorasick() : T(1), Leaf(1,0), suffixLink(1,0){ T[0].fill(-1); }",
		  "",
		  "    int transition(int node, char c){",
		  "        return T[node][c - 'a'];",
		  "    }",
		  "",
		  "    void insert(string& s, int val = 1){",
		  "        int node = 0;",
		  "        for(int i = 0; i < s.size(); i++){",
		  "            int c = s[i] - 'a';",
		  "            if(T[node][c] == -1){",
		  "                T[node][c] = T.size();",
		  "                T.emplace_back();",
		  "                T.back().fill(-1);",
		  "                Leaf.push_back(0);",
		  "                suffixLink.push_back(-1);",
		  "            }",
		  "            node = T[node][c];",
		  "        }",
		  "        Leaf[node] += val;",
		  "    }",
		  "",
		  "    void push_links(){",
		  "        for(int c = 0; c < ALPHABET_SIZE; c++){",
		  "            if(T[0][c] == -1) T[0][c] = 0;",
		  "        }",
		  "        queue<int> q;",
		  "        for(int c = 0; c < ALPHABET_SIZE; c++){",
		  "            if(T[0][c] != -1 && T[0][c] != 0){",
		  "                suffixLink[T[0][c]] = 0;",
		  "                q.push(T[0][c]);",
		  "            }",
		  "        }",
		  "        while(q.size()){",
		  "            int node = q.front(); q.pop();",
		  "            if(suffixLink[node] != -1){",
		  "                Leaf[node] += Leaf[suffixLink[node]];",
		  "            }",
		  "            for(int c = 0; c < ALPHABET_SIZE; c++){",
		  "                int child = T[node][c];",
		  "                if(child == -1){",
		  "                    T[node][c] = T[suffixLink[node]][c];",
		  "                }else{",
		  "                    suffixLink[child] = T[suffixLink[node]][c];",
		  "                    q.push(child);",
		  "                }",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "    int count(int node){",
		  "        return Leaf[node];",
		  "    }",
		  "};"
		],
		"description": ""
	  }
}