{
	"": {
		"prefix": "ArticulationPointAndBridges",
		"body": [
		  "// finding Articulation Point && Bridges in a graph",
		  "const int N = 1e5;",
		  "int n, m, timer, tin[N], low[N], vis[N], AP[N];",
		  "vector<int> adj[N];",
		  "vector<pair<int, int>> B;",
		  "",
		  "void tarjans(){",
		  "	timer = 0;",
		  "	memset(tin, 0, sizeof timer);",
		  "	memset(low, 0, sizeof low);",
		  "	memset(vis, 0, sizeof vis);",
		  "	memset(AP, 0, sizeof AP);",
		  "	function<void(int, int)> dfs = [&](int u, int p){",
		  "		vis[u] = 1;",
		  "		tin[u] = low[u] = timer++;",
		  "		int children = 0;",
		  "		for(auto v : adj[u]){",
		  "			if(v == p) continue;",
		  "			if(vis[v]){",
		  "				low[u] = min(low[u], tin[v]);",
		  "			}else{",
		  "				dfs(v, u);",
		  "				low[u] = min(low[u], low[v]);",
		  "				// For Bridges",
		  "				if(low[v] > tin[u]){",
		  "					B.push_back({u, v});",
		  "				}",
		  "				// For Articulation point",
		  "				children++;",
		  "				if(low[v] >= tin[u] && p != -1){",
		  "					AP[u] = 1;",
		  "				}",
		  "			}",
		  "		}",
		  "		if(p == -1 && children > 1) AP[u] = 1;",
		  "	};",
		  "	for(int i = 0 ;i < n ; i++){",
		  "		if(!vis[i]) dfs(i, -1);",
		  "	}",
		  "}"
		],
		"description": ""
	  }
}