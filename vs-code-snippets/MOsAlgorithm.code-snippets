{
	"": {
		"prefix": "MOsAlgorithm",
		"body": [
		  "",
		  "const int N = 2e5 + 5;",
		  "const int Q = 2e5 + 5;",
		  "int n, block, ans;",
		  "int a[N], Last[N], cnt[N], vis[N], rev[N];",
		  "",
		  "struct Query{",
		  "	int idx, l, r, lb, rb, t;",
		  "	Query(int idx, int t) : idx(idx), t(t){}",
		  "	void read(){",
		  "		cin >> l >> r;",
		  "		l--, r--;",
		  "		lb = l / block;",
		  "		rb = r / block;",
		  "	}",
		  "	bool operator<(Query& a){",
		  "		if(lb == a.lb){",
		  "			if(rb == a.rb){",
		  "				return t < a.t;",
		  "			}else{",
		  "				return rb < a.rb;",
		  "			}",
		  "		}else{",
		  "			return lb < a.lb;",
		  "		}",
		  "	}",
		  "};",
		  "struct Update{",
		  "	int idx, curr, prev;",
		  "	void read(){",
		  "		cin >> idx >> curr;",
		  "		idx--;",
		  "		prev = Last[idx];",
		  "		Last[idx] = curr;",
		  "	}",
		  "};",
		  "",
		  "void add(int idx){",
		  "	vis[idx] = true;",
		  "	if(cnt[a[idx]] == 0){",
		  "		ans += rev[a[idx]];",
		  "	}",
		  "	cnt[a[idx]]++;",
		  "}",
		  "",
		  "void remove(int idx){",
		  "	vis[idx] = false;",
		  "	cnt[a[idx]]--;",
		  "	if(cnt[a[idx]] == 0){",
		  "		ans -= rev[a[idx]];",
		  "	}",
		  "}",
		  "",
		  "void upd(int idx, int val){",
		  "	if(!vis[idx]){",
		  "		a[idx] = val;",
		  "		return;",
		  "	}",
		  "	remove(idx);",
		  "	a[idx] = val;",
		  "	add(idx);",
		  "}",
		  "",
		  "int qry(){",
		  "	return ans;",
		  "}"
		],
		"description": ""
	  }
}