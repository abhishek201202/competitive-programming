{
	"": {
		"prefix": "CHT",
		"body": [
		  "// [maximizing Problem] https://codeforces.com/contest/1083/problem/E",
		  "// [minimizing Problem] https://atcoder.jp/contests/dp/tasks/dp_z",
		  "struct line{",
		  "    int m , c;",
		  "    int eval(int x){ return m*x + c; }",
		  "    long double intersectX(line l){ return ((long double)(c - l.c)) / (l.m - m); }",
		  "};",
		  "",
		  "struct CHT{",
		  "    deque<line> dq;",
		  "    // maintaining a upper convex hull for maximizing problem ",
		  "    // For minimising problem just change the inequality",
		  "    void add(line l){",
		  "        while(dq.size() >= 2 && l.intersectX(dq[0]) >= dq[0].intersectX(dq[1])){",
		  "            dq.pop_front();",
		  "        }",
		  "        dq.push_front(l);",
		  "    }",
		  "    int query(int x){",
		  "        while(dq.size() >= 2 && dq.back().intersectX(dq[dq.size() - 2]) >= x){",
		  "            dq.pop_back();",
		  "        }",
		  "        return dq.back().eval(x);",
		  "    }",
		  "};"
		],
		"description": ""
	  }
}