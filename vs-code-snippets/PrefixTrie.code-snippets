{
	"": {
		"prefix": "PrefixTrie",
		"body": [
		  "template <typename T> struct Trie{",
		  "    T val;",
		  "    bool end;",
		  "    vector<Trie*> child;",
		  "    Trie(){",
		  "        this -> end = false;",
		  "        this -> val = 0;",
		  "        child.resize(26 , NULL);",
		  "    }",
		  "",
		  "    /* insert string into trie */",
		  "    void insert(string s){",
		  "        Trie *root = this;",
		  "        for(int i = 0; i < s.size(); i ++){",
		  "            int ind = s[i] - 'a';",
		  "            if(root -> child[ind] == NULL){",
		  "                root -> child[ind] = new Trie();",
		  "            }",
		  "            root = root -> child[ind];",
		  "        }",
		  "        root -> end = true;",
		  "    }",
		  "",
		  "    /* string is present in the trie or not */",
		  "    int search(string s){",
		  "        Trie *root = this;",
		  "        for(int i = 0; i < s.size(); i++){",
		  "            int ind = s[i] - 'a';",
		  "            if(root -> child[ind] != NULL){",
		  "                root = root -> child[ind];",
		  "            }else{",
		  "                return false;",
		  "            }",
		  "        }",
		  "        return root -> end;",
		  "    }",
		  "",
		  "    /* prefix or not */",
		  "    bool is_prefix(string s) {",
		  "        Trie *root = this;",
		  "        for(int i = 0; i < s.size(); i ++){",
		  "            int ind = s[i] - 'a';",
		  "            if(root -> child[ind] != NULL){",
		  "                root = root -> child[ind];",
		  "            }else{",
		  "                return false;",
		  "            }",
		  "        }",
		  "        return true;",
		  "    }",
		  "};",
		  ""
		],
		"description": ""
	  }
}